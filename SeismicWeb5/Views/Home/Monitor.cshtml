@{
    ViewData["Title"] = "Seismic Monitoring";
}

@model List<SeismicWeb5.Controllers.DataModel>

<head>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
<h1>@ViewData["Title"]</h1>

<div>
    <canvas id="seismographChart" width="800" height="400"></canvas>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<!-- JavaScript code -->
<script>
    // Get the canvas element and initialize the Chart
    var ctx = document.getElementById('seismographChart').getContext('2d');
    var seismographChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [
                {
                    label: 'gyroX',
                    borderColor: 'rgb(255, 99, 132)',
                    data: [],
                    fill: false
                },
                {
                    label: 'gyroY',
                    borderColor: 'rgb(75, 192, 192)',
                    data: [],
                    fill: false
                },
                {
                    label: 'gyroZ',
                    borderColor: 'rgb(54, 162, 235)',
                    data: [],
                    fill: false
                }
            ]
        },
        options: {
            scales: {
                x: {
                    type: 'linear',
                    position: 'bottom'
                },
                y: {
                    min: -5,
                    max: 5
                }
            }
        }
    });

    // Fetch data from Firebase periodically and update the chart
    async function updateChart() {
        try {
            var response = await fetch('/Home/GetDataFromFirebase');
            var responseText = await response.text();
            console.log('Raw Response:', responseText);

            var data = JSON.parse(responseText);

            // Add data points to the chart
            data.forEach(item => {
                seismographChart.data.labels.push(''); // You can set meaningful labels if needed
                seismographChart.data.datasets[0].data.push(item.gyroX);
                seismographChart.data.datasets[1].data.push(item.gyroY);
                seismographChart.data.datasets[2].data.push(item.gyroZ);
            });

            // Update the chart
            seismographChart.update();

            // Call the function again after a delay (e.g., 1 second)
            setTimeout(updateChart, 1000);
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    // Start updating the chart
    updateChart();
</script>
</body>